security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    #comment sont hachés nos mdp ?
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User: # pour cette entité..
            algorithm: auto # on utilise l'algo par défaut

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    # d'où viennent nos users ?
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider: # un nom unique
            entity: #nos users sont en bdd
                class: App\Entity\User # c'est cette entité là
                property: username # représentée par cette propriété là

    #activation du système de sécurité
    firewalls:
        #permet de désactiver sur la debug toolbar, le profiler, etc..
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # notre pare-feu principal, activé partout par défaut
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\SecurityAuthenticator

            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret: '%kernel.secret%' # required
                lifetime: 60000 # 1 week in seconds

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # autorisations
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
